package euler

import (
	"fmt"
	"time"
)

/*
Problem012 answers the problem at : https://projecteuler.net/problem=12

* Problem 12:
		The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

							1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

		Let us list the factors of the first seven triangle numbers:

		    1: 1
		    3: 1,3
		    6: 1,2,3,6
		   10: 1,2,5,10
		   15: 1,3,5,15
		   21: 1,3,7,21
		   28: 1,2,4,7,14,28

		We can see that 28 is the first triangle number to have over five divisors.
		What is the value of the first triangle number to have over five hundred divisors?
*/
func Problem012() {

	start := time.Now()
	ans := get12()
	end := time.Now()

	fmt.Printf("\nAnswer to Problem 12 : %d\n", ans)
	fmt.Printf("Time Taken: %f seconds\n\n", end.Sub(start).Seconds())

}

func highTriangle(n int64) bool {
	return len(Factors(n)) > 500
}

//TriangleNum reports the nth triangle number
func TriangleNum(n int64) int64 {
	return n * (n + 1) / 2
}

func get12() int64 {
	var i int64 = 1
	for !highTriangle(TriangleNum(i)) {
		i++
	}
	return TriangleNum(i)
}
